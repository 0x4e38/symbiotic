#!/usr/bin/env python
#
#  -- Symbiotic tool --
#
#   Author: Marek Chalupa <mchqwerty@gmail.com>
#           2015 - 2016
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.

import sys
import os
import re
import getopt
import signal
from subprocess import call, Popen, PIPE, STDOUT
from time import time

# FIXME print versions of components too
VERSION='3.0.3-dev'

usage_msg = """
Usage: symbiotic OPTS sources

where OPTS can be following:

    --bc                   Given file is a bytecode
    --64                   Use 64-bit environment
    --timeout=t            Set timeout to t seconds
    --no-slice             Do not slice the code
    --no-prepare           Do not prepare the code
    --malloc-never-fails   Suppose malloc and calloc never return NULL
    --require-slicer       Abort if slicing fails (default is to use the original file)
    --no-symexe            Do not run symbolic execution (handy for debugging)
    --optimize=TYPES       Run optimizations, TYPES can be: before, before-O2, after.
                           before/after means before or/and after slicing. before-O2
                           runs full optimizations before slicing (normally only some
                           conservative optimizations are run before slicing).
                           none disables optimizations (same as --no-optimize)
    --no-optimize          Don't optimize the code (same as --optimize=none)
    --libc=klee            Link klee-libc.bc to the module
    --no-lib               Don't link lib.bc to the module
    --slicing-criterion=C  Slice to slicing criterion (function call-sites) 'C'
                           (default is '__assert_fail')
    --prp=property         Specify property that should hold. It is either LTL formula
                           as specivied by SV-COMP, or one of following shortcuts:
                             null-deref   -- program is free of null-dereferences
                             valid-deref  -- all dereferences are valid
                             valid-free   -- all free() calls are valid
                           The string can be given on line or in a file.
    --pta=[fs|fi|old]      Use flow-sensitive/flow-insensitive or old
                           (flow-insensitive too) points-to analysis when slicing.
                           Default is the old
    --debug=what           Print debug messages, what can be comma separated list of:
                           all, compile, prepare, slicer
                           In that case you get verbose output. You can just use
                           --debug= to print basic messages.
    --output=FILE          Store the final code (that is to be run by symexe) to FILE
    --witness=FILE         Store witness into FILE (default is witness.graphml)
    --cflags=flags
    --cppflags=flags       Append extra CFLAGS and CPPFLAGS to use while compiling,
                           the environment CFLAGS and CPPFLAGS are used too
    --help                 Show help message
    --version              Return version

    One (and only one) of the sources must contain 'main' function
"""

# define and compile regular expressions for parsing klee's output
patterns = {
    'ASSERTIONFAILED' : re.compile('.*ASSERTION FAIL:.*'),
    'ESTPTIMEOUT' : re.compile('.*query timed out (resolve).*'),
    'EKLEETIMEOUT' : re.compile('.*HaltTimer invoked.*'),
    'EEXTENCALL' : re.compile('.*failed external call.*'),
    'ELOADSYM' : re.compile('.*ERROR: unable to load symbol.*'),
    'EINVALINST' : re.compile('.*LLVM ERROR: Code generator does not support.*'),
    'EKLEEASSERT' : re.compile('.*klee: .*Assertion .* failed.*'),
    'EINITVALS' : re.compile('.*unable to compute initial values.*'),
    'ESYMSOL' : re.compile('.*unable to get symbolic solution.*'),
    'ESILENTLYCONCRETIZED' : re.compile('.*silently concretizing.*'),
    'ECONCRETIZED' : re.compile('.* concretized symbolic size.*'),
    'EEXTRAARGS' : re.compile('.*calling .* with extra arguments.*'),
    'EABORT' : re.compile('.*abort failure.*'),
    #'EGENERAL' : re.compile('.*now ignoring this error at this location.*'),
    'EMALLOC' : re.compile('.*found huge malloc, returning 0.*'),
    'ESKIPFORK' : re.compile('.*skipping fork.*'),
    'EKILLSTATE' : re.compile('.*killing.*states (over memory cap).*')
}

supported_properties = {
    'CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )' : 'REACHCALL',
    'CHECK( init(main()), LTL(G valid-free) )'                 : 'VALID-FREE',
    'CHECK( init(main()), LTL(G valid-deref) )'                : 'VALID-DEREF',
    'CHECK( init(main()), LTL(G valid-memtrack) )'             : 'MEM-TRACK',
    'valid-deref'                                              : 'VALID-DEREF',
    'valid-free'                                               : 'VALID-FREE',
    'valid-memtrack'                                           : 'MEM-TRACK',
    'null-deref'                                               : 'NULL-DEREF',
}

unsupported_call = re.compile('.*call to .* is unsupported.*')

# the list of optimizations is based on klee -optimize
# option, but is adjusted for our needs (therefore
# we don't use the -optimize option with klee)
optimizations_O2 = ['-simplifycfg', '-globalopt', '-globaldce', '-ipconstprop',
                    '-deadargelim', '-instcombine', '-simplifycfg', '-prune-eh',
                    '-functionattrs', '-inline', '-argpromotion', '-instcombine',
                    '-jump-threading', '-simplifycfg', '-gvn', '-scalarrepl',
                    '-instcombine', '-tailcallelim', '-simplifycfg',
                    '-reassociate', '-loop-rotate', '-licm', '-loop-unswitch',
                    '-instcombine', '-indvars', '-loop-deletion', '-loop-unroll',
                    '-instcombine', '-memcpyopt', '-sccp', '-instcombine',
                    '-dse', '-adce', '-simplifycfg', '-strip-dead-prototypes',
                    '-constmerge', '-ipsccp', '-deadargelim', '-die',
                    '-instcombine']

enable_debug = False
debug_opts = []
# this is global variable for currently running
# klee process, so that we can kill it if we need
# (e. g. on timeout)
current_process = None

# shared global flags for compilation
CFLAGS = []
CPPFLAGS = []

# variable used to measure elapsed time
last_time = None
def print_elapsed_time(msg):
    global last_time
    assert last_time is not None

    tm = time() - last_time
    print('{0}: {1}'.format(msg, tm))
    # set new starting point
    last_time = time()

COLORS = {
    'RED'   : '\033[1;31m',
    'GREEN' : '\033[1;32m',
    'BROWN' : '\033[0;33m',
    'RESET' : '\033[0m'
}

def print_stream(msg, stream, prefix = None, print_nl = True, color = None):
    """
    Print message to stderr/stdout

    @ msg      : str    message to print
    @ prefix   : str    prefix for the message
    @ print_nl : bool  print new line after the message
    @ color    : str    color to use when printing, default None
    """

    # don't print color when the output is redirected
    # to a file
    if not stream.isatty():
        color = None

    if not color is None:
        stream.write(COLORS[color])

    if msg == '':
        return
    if not prefix is None:
        stream.write(prefix)

    stream.write(msg)

    if not color is None:
        stream.write(COLORS['RESET'])

    if print_nl:
        stream.write('\n')

    stream.flush()

def print_stderr(msg, prefix = None, print_nl = True, color = None):
    print_stream(msg, sys.stderr, prefix, print_nl, color)

def print_stdout(msg, prefix = None, print_nl = True, color = None):
    print_stream(msg, sys.stdout, prefix, print_nl, color)

def err(msg, color = 'RED'):
    print_stderr(msg, 'ERROR: ', color=color)
    sys.exit(1)

def dbg(msg, domain = 'all', print_nl = True):
    if enable_debug:
        global debug_opts
        if domain == 'all' or domain in debug_opts:
            print_stderr(msg, 'DBG: ', print_nl)

class Timeout(Exception):
    pass

def start_timeout(sec):
    def alarm_handler(signum, data):
        raise Timeout

    signal.signal(signal.SIGALRM, alarm_handler)
    signal.alarm(sec)

def stop_timeout():
    # turn of timeout
    signal.signal(signal.SIGALRM, signal.SIG_DFL)
    signal.alarm(0)

class ProcessWatch(object):
    """ Parse output of running process """

    def parse(self, line):
        """
        Parse output of running process.
        This method will be override by child class
        """
        pass

    def ok(self):
        """
        Return True if everyithing is ok with the process,
        or False if anything went wrong (based on the process' output).
        In case that this method returns False, run_and_watch() function
        will terminate the process and return -1
        """
        return True

def run_and_watch(cmd, watch):
    """
    Run command @cmd and pass its stdout+stderr output
    to @watch object. watch object is supposed to be
    an instance of ProcessWatch object. Running process
    has handle in current_process global variable.

    \return return code of the process or -1 on watch error
    """

    dbg(' '.join(cmd))

    # run the command and store handle into global variable
    # current_process, so that we can easily kill this process
    # on timeout or signal. This way we can run only one
    # process at the time, but we don't need more (yet?)
    global current_process
    current_process = Popen(cmd, stdout=PIPE, stderr=STDOUT)

    while True:
        line = current_process.stdout.readline()
        if line == '' and current_process.poll() is not None:
            break

        watch.parse(line)
        if not watch.ok():
            # watch told us to kill the process for some reason
            current_process.terminate()
            current_process.kill()
            return -1

    ret = current_process.wait()
    current_process = None

    return ret

class DbgWatch(ProcessWatch):
    def __init__(self, domain = 'all', print_nl = False):
        self.domain = domain
        self.print_nl = print_nl

    def parse(self, line):
        dbg(line, self.domain, self.print_nl)

class BufferedDbgWatch(DbgWatch):
    """
    This is same as dbg watch, but it stores
    few last lines of the output
    """
    def __init__(self, domain = 'all', print_nl = False, maxlines = 50):
        DbgWatch.__init__(self, domain, print_nl)
        self.lines = []
        self.MAX_LINES_NUM = maxlines
        self.cur_lines_num = 0

        # use DbgWatch in this case
        assert maxlines > 0

    def getLines(self):
        return self.lines

    def parse(self, line):
        DbgWatch.parse(self, line)

        # store the output
        if self.cur_lines_num == self.MAX_LINES_NUM:
            self.lines.pop(0)
        else:
            self.cur_lines_num += 1

        self.lines.append(line)
        assert self.cur_lines_num <= self.MAX_LINES_NUM

class PrepareWatch(ProcessWatch):
    def parse(self, line):
        if 'removing' in line:
            sys.stdout.write(line)
        else:
            dbg(line, 'prepare', False)

class SlicerWatch(ProcessWatch):
    def parse(self, line):
        if 'INFO' in line:
            sys.stdout.write('slicer-')
            sys.stdout.write(line)
        elif 'ERROR' in line or 'error' in line:
            sys.stderr.write(line)
        else:
            dbg(line, 'slicer', False)

class CompileWatch(ProcessWatch):
    """ Parse output of compilation """

    def parse(self, line):
        if 'error' in line or 'ERROR' in line:
            sys.stderr.write('cc: {0}'.format(line))
        else:
            dbg(line, 'compile', False)

def get_symbiotic_dir():
    # get real path (strip off links)
    realpath = os.path.realpath(sys.argv[0])
    return os.path.abspath(os.path.dirname(realpath))

def get_include_paths():
    """
    Find paths where standard headers are located
    """
    cmd = ['find', '/usr/lib', '-name', 'stddef.h']
    watch = BufferedDbgWatch(None)
    paths = []

    if run_and_watch(cmd, watch) == 0:
        for line in watch.getLines():
            if line.startswith('/usr/lib/'):
                paths.append(os.path.dirname(line))

    return paths

def set_environ(is32bit = False):
    def prepend(env, what):
        if os.environ.has_key(env):
            newenv = '{0}:{1}'.format(what, os.environ[env])
        else:
            newenv = what

        os.environ[env] = newenv

    # do this before we override PATH - we need 'find' utility
    additional_paths = get_include_paths()
    for p in additional_paths:
        prepend('C_INCLUDE_DIR', p)

    symbiotic_dir = get_symbiotic_dir()
    # set path without preprending, we want to use only our stuff
    os.environ['PATH'] = '{0}/bin'.format(symbiotic_dir)
    prepend('LD_LIBRARY_PATH', '{0}/lib'.format(symbiotic_dir))
    prepend('C_INCLUDE_DIR', '{0}/include'.format(symbiotic_dir))

    if is32bit:
        os.environ['KLEE_RUNTIME_LIBRARY_PATH'] = '{0}/lib32/klee/runtime'.format(symbiotic_dir)
    else:
        os.environ['KLEE_RUNTIME_LIBRARY_PATH'] = '{0}/lib/klee/runtime'.format(symbiotic_dir)

    dbg('PATH={0}'.format(os.environ['PATH']))
    dbg('LD_LIBRARY_PATH={0}'.format(os.environ['LD_LIBRARY_PATH']))
    dbg('C_INCLUDE_DIR={0}'.format(os.environ['C_INCLUDE_DIR']))

def parse_environ():
    """
    Parse environment variables of interest and
    change running options accordingly
    """

    global CFLAGS
    global CPPFLAGS

    for p in os.environ['C_INCLUDE_DIR'].split(':'):
        CPPFLAGS.append('-I{0}'.format(p))

    if os.environ.has_key('CFLAGS'):
        CFLAGS += os.environ['CFLAGS'].split(' ')
    if os.environ.has_key('CPPFLAGS'):
        CPPFLAGS += os.environ['CPPFLAGS'].split(' ')

def compile_to_llvm(source, is32bit = False, output = None):
    """
    Compile given source to LLVM bytecode
    """
    symbiotic_dir = get_symbiotic_dir()

    cmd = ['clang', '-g', '-c', '-emit-llvm']

    global CFLAGS
    global CPPFLAGS

    if CFLAGS:
        cmd += CFLAGS
    if CPPFLAGS:
        cmd += CPPFLAGS

    if is32bit:
        cmd.append('-m32')

    cmd.append('-o')
    if output is None:
        llvmfile = '{0}.bc'.format(source[:source.rfind('.')])
    else:
        llvmfile = output

    cmd.append(llvmfile)
    cmd.append(source)

    if run_and_watch(cmd, CompileWatch()) != 0:
        return None

    return llvmfile

def get_libraries(opts, which=['lib', 'memalloc']):
    files = []

    if not opts.no_lib:
        symbiotic_dir = get_symbiotic_dir()

        d = '{0}/lib'.format(symbiotic_dir)
        if opts.is32bit:
            d += '32'

        if 'lib' in which:
            libc = '{0}/lib.c'.format(symbiotic_dir)
            llvmlibbc = compile_to_llvm(libc, opts.is32bit)
            if llvmlibbc is None:
                err('Failed compiling support library (lib.bc)')

            files.append(llvmlibbc)

        if 'memalloc' in which:
            libc = '{0}/memalloc.c'.format(symbiotic_dir)
            llvmlibbc = compile_to_llvm(libc, opts.is32bit)
            if llvmlibbc is None:
                err('Failed compiling support library (memalloc.bc)')

            files.append(llvmlibbc)

    if opts.add_libc:
        files.append('{0}/klee/runtime/klee-libc.bc'.format(d))

    return files

class UnsuppWatch(ProcessWatch):
    def __init__(self):
        self._ok = True

    def ok(self):
        return self._ok

    def parse(self, line):
        dbg(line, domain='prepare', print_nl = False)
        self._ok = not unsupported_call.match(line)

def check_llvmfile(llvmfile):
    cmd = ['opt', '-load', 'LLVMsvc15.so', '-check-unsupported',
           '-o', '/dev/null', llvmfile]
    if run_and_watch(cmd, UnsuppWatch()) == -1:
        return False

    return True

def parse_klee_output(line, valid_deref = False):
    for (key, pattern) in patterns.iteritems():
        if pattern.match(line):
            # return True so that we know we should terminate
            if key == 'ASSERTIONFAILED':
                return key
            elif valid_deref and key == 'EMEMERROR':
                return 'ASSERTIONFAILED (valid-deref)'
            elif valid_deref and key == 'EFREE':
                return 'ASSERTIONFAILED (valid-free)'
            else:
                return key

    return None

class KleeWatch(ProcessWatch):
    def __init__(self, valid_deref = False):
        self._done = False
        self._found = []
        self._valid_deref = valid_deref

    # XXX don't kill klee after the assertion
    # is found - we have a -halt-affter-assert
    # switch in klee that will do that for us.
    # If we don't klee the klee, we'll get how
    # many paths we discovered
    # def done(self):
    #     return self._done
    def done(self):
        return False;

    def found(self):
        return ' '.join(self._found)

    def parse(self, line):
        found = parse_klee_output(line, self._valid_deref)
        if found:
            self._found.insert(0, found)

        if 'ERROR' in line or 'WARN' in line or 'Assertion' in line:
            sys.stdout.write(line)
        elif 'error' in line:
            sys.stderr.write(line)
        else:
            dbg(line, 'all', False)

def run_symexe(llvmfile, opts, timeout = 0):
    cmd = ['klee', '-halt-after-assert', '-write-paths',
           '-solver-optimize-divides=false',
           '-max-time={0}'.format(timeout), llvmfile]
    dbg(' '.join(cmd))

    global current_process
    current_process = Popen(cmd, stdout=PIPE, stderr=STDOUT)

    watch = KleeWatch('VALID-DEREF' in opts.prp)
    while True:
        line = current_process.stdout.readline()
        if line == '' and current_process.poll() is not None:
            break

        watch.parse(line)
        if watch.done():
            break

    ret = current_process.wait()
    current_process = None

    found = watch.found()
    if ret != 0:
        found += ' EKLEEERROR'

    return found

def report_results(res):
    dbg(res)
    result = res
    color = 'BROWN'

    if res.startswith('ASSERTIONFAILED'):
        result = 'FALSE'
        color = 'RED'
    elif res == '':
        result = 'TRUE'
        color='GREEN'
    elif res == 'TIMEOUT':
        result = 'TIMEOUT'
    elif 'EKLEEERROR' in res:
        result = 'ERROR'
        color='RED'
    else:
        result = 'UNKNOWN'

    sys.stdout.flush()
    print_stdout(result, color=color)

    return result

class SymbioticException(Exception):
    def __init__(self, msg):
        Exception.__init__(self, msg)

class SymbioticOptions(object):
    def __init__(self, is32bit = True, noslice=False, timeout=0):
        self.is32bit = is32bit
        self.prp = []
        self.noslice = noslice
        self.malloc_never_fails = False
        self.noprepare = False
        self.timeout = 0
        self.add_libc = False
        self.no_lib = False
        self.old_slicer = False
        self.require_slicer = False
        self.no_optimize = False
        self.no_symexe = False
        self.final_output = None
        self.witness_output = 'witness.graphml'
        self.source_is_bc = False
        self.optlevel = ["before", "after"]
        self.slicer_pta = 'old'
        self.slicing_criterion = '__assert_fail'

def run_checked(cmd, error_msg, dbg_domain = 'all'):
    """
    Run command and raise an exeception on error
    """
    watch = BufferedDbgWatch(dbg_domain)
    if run_and_watch(cmd, watch) != 0:
       for line in watch.getLines():
           print_stderr(line, 'ERR: ')
       raise SymbioticException(error_msg)

class Symbiotic(object):
    """
    Instance of symbiotic tool. Instruments, prepares, compiles and runs
    symbolic execution on given source(s)
    """
    def __init__(self, src, opts = None):
        # source file
        self.sources = src
        # source compiled to llvm bytecode
        self.llvmfile = None
        # the file that will be used for symbolic execution
        self.runfile = None

        if opts is None:
            self.options = SymbioticOptions()
        else:
            self.options = opts

    def _build_fix(self):
        """
        Build fix. We use clang 3.4 that has some bugs regarding inlining.
        """
        sd = get_symbiotic_dir()
        for source in self.sources:
            cmd = ['/bin/sh', '-c', '{0}/build-fix.sh {1}'.format(sd, source)]
            run_checked(cmd, 'Failed preprocessing the code')


    def prepare(self, passes = ['-prepare', '-delete-undefined']):
        if self.options.noprepare:
            return

        output = '{0}-prep.bc'.format(self.llvmfile[:self.llvmfile.rfind('.')])
        cmd = ['opt', '-load', 'LLVMsvc15.so', self.llvmfile, '-o', output] + passes

        if run_and_watch(cmd, PrepareWatch()) != 0:
            raise SymbioticException('Prepare phase failed')

        self.llvmfile = output

    def _instrument(self, prp):
        prefix = '{0}/instrumentation/'.format(get_symbiotic_dir())
        if prp == 'VALID-FREE':
            config = prefix + 'double_free/config.json'
            tolink = prefix + 'double_free/double_free.c'
        elif prp == 'MEM-TRACK':
            config = prefix + 'double_free/config-memtrack.json'
            tolink = prefix + 'double_free/double_free.c'
        elif prp == 'NULL-DEREF':
            config = prefix + 'null_deref/config.json'
            tolink = prefix + 'null_deref/null_deref.c'
        else:
            raise SymbioticException('BUG: Unhandled property')

        # we need to compile and link the state machines before the
        # instrumentation itself

        tolink = compile_to_llvm(tolink, self.options.is32bit)
        self.link(libs=[tolink])

        output = '{0}-inst.bc'.format(self.llvmfile[:self.llvmfile.rfind('.')])
        cmd = ['LLVMinstr', config, self.llvmfile, output]

        run_checked(cmd, 'Instrumenting the code failed', 'instrument')

        self.llvmfile = output

    def instrument(self):
        """
        Instrument the code.
        """

        # these options are exclusive
        if 'MEM-TRACK' in self.options.prp:
            self._instrument('MEM-TRACK')
        elif 'VALID-FREE' in self.options.prp:
            self._instrument('VALID-FREE')

        if 'NULL-DEREF' in self.options.prp:
            self._instrument('NULL-DEREF')

    def link(self, output = None, libs = None):
        if libs is None:
            libs = get_libraries(opts)

        if not libs:
            return

        if output is None:
            output = '{0}-lnkd.bc'.format(self.llvmfile[:self.llvmfile.rfind('.')])

        cmd = ['llvm-link', '-o', output] + libs
        if self.llvmfile:
            cmd.append(self.llvmfile)

        run_checked(cmd, 'Failed linking llvm file with libraries', 'compile')

        self.llvmfile = output

    def slicer(self, criterion):
        output = '{0}.sliced'.format(self.llvmfile[:self.llvmfile.rfind('.')])
        if self.options.old_slicer:
            cmd = ['opt', '-load', 'LLVMSlicer.so',
                   '-simplifycfg', '-create-hammock-cfg',
                   '-slice-inter', '-simplifycfg', '-o', output, self.llvmfile]
        else:
            cmd = ['llvm-slicer', '-c', criterion]
            if self.options.slicer_pta in ['fi', 'fs']:
                cmd.append('-pta')
                cmd.append(self.options.slicer_pta)

            if 'slicer' in debug_opts:
                cmd.append('-statistics')

            cmd.append(self.llvmfile)

        if run_and_watch(cmd, SlicerWatch()) != 0:
            raise SymbioticException('Slicing failed')

        self.llvmfile = output

    def optimize(self, passes = optimizations_O2):
        if self.options.no_optimize:
            return

        output = '{0}-opt.bc'.format(self.llvmfile[:self.llvmfile.rfind('.')])
        cmd = ['opt', '-o', output, self.llvmfile] + passes

        run_checked(cmd, 'Optimizing the code failed', 'prepare')

        self.llvmfile = output

    def run(self, criterion = '__assert_fail'):
        try:
            return self._run(criterion);
        except KeyboardInterrupt:
            if current_process:
                current_process.terminate()
                current_process.kill()
            print('Interrupted...')

    def _run(self, criterion = '__assert_fail'):
        # start counting time
        global last_time
        last_time = time();

        try:
            if not self.options.source_is_bc:
                self._build_fix()

            # set environ here, after instrumentaion,
            # because in instrumentation we use
            # grep and similar commands and in set_environ
            # we reset PATH variable
            # FIXME rewrite instrumentation to Python too,
            # so that we can set and parse environ outside of _run(),
            # this just don't belong to this place...
            set_environ(opts.is32bit)
            # set CFLAGS and CPPFLAGS for compilation
            parse_environ()

            if self.options.source_is_bc:
                self.llvmfile = sources[0]
            else:
                # compile all sources
                llvmsrc = []
                for source in self.sources:
                    llvms = compile_to_llvm(source, self.options.is32bit)
                    if llvms is None:
                        err('Failed compiling the source {0}'.format(source))

                    llvmsrc.append(llvms)

                # link all compiled sources to a one bytecode
                # the result is stored to self.llvmfile
                self.link('symbiotic_code.bc', llvmsrc)
                if self.llvmfile is None:
                    err('Failed linking compiled sources together')

            if not check_llvmfile(self.llvmfile):
                err('Unsupported call (probably pthread API)')

            # check if we should instrument the version of malloc
            # that never returns a NULL pointer
            if self.options.malloc_never_fails:
                instrument_alloc = '-instrument-alloc-nf'
            else:
                instrument_alloc = '-instrument-alloc'

            # remove invaild function definitions and instrument our malloc
            self.prepare(passes = ['-prepare', instrument_alloc,
                                   '-initialize-uninitialized'])

            # delete undefined function calls
            self.prepare(passes = ['-delete-undefined'])

            # in the case of valid-free property we want to
            # instrument even __VERIFIER_malloc functions,
            # so we need to link it before instrumenting
            is_valid_free = ('VALID-FREE' in self.options.prp) or\
                            ('MEM-TRACK' in self.options.prp)
            if is_valid_free:
                lib = get_libraries(self.options, ['memalloc'])
                self.link(libs = lib)

            # now instrument the code according to properties
            self.instrument()

            # link with libraries (add our definitions)
            if is_valid_free:
                # link only lib in this case, otherwise we'll get multiple
                # definitions to some functions
                lib = get_libraries(self.options, ['lib'])
                self.link(libs=lib)
            else:
                self.link()

            # slice the code
            if not self.options.noslice:
                # run optimizations that can make slicing more precise
                if "before-O2" in self.options.optlevel:
                    self.optimize(passes=optimizations_O2)
                elif "before" in self.options.optlevel:
                    self.optimize(passes=['-simplifycfg', '-constmerge', '-dce',
                                          '-ipconstprop', '-argpromotion',
                                          '-instcombine', '-deadargelim',
                                          '-simplifycfg'])

                # print info about time
                print_elapsed_time('INFO: Compilation, preparation and '\
                                   'instrumentation time')

                self.slicer(self.options.slicing_criterion)
                print_elapsed_time('INFO: Total slicing time')

            # optimize the code before symbolic execution
            if "after" in self.options.optlevel:
                self.optimize()

        except SymbioticException as e:
            # FIXME if we should not run further, do not run further
            err('Failure >> {0}'.format(e.message))

        if not self.options.final_output is None:
            # copy the file to final_output
            try:
                os.rename(self.llvmfile, self.options.final_output)
                self.llvmfile = self.options.final_output
            except OSError as e:
                err('Cannot create {0}: {1}'.format(self.options.final_output,
                                                    e.message))
        if not self.options.no_symexe:
            found = run_symexe(self.llvmfile, opts = self.options)
        else:
            found = 'Did not run symbolic execution'

        return report_results(found)

def generate_graphml(path, saveto):
    if saveto is None:
        saveto = '{0}.graphml'.format(os.path.basename(path))
        saveto = os.path.abspath(saveto)

    dbg('Generating counterexample: {0}'.format(saveto))
    bindir = os.path.dirname(sys.argv[0])
    f = open('/dev/null', 'r')
    # FIXME: rewrite path_to_ml.pl to python, so that we can use it
    # right from here
    ret = call(['{0}/path_to_ml.pl {1} > {2}'.format(bindir, path, saveto)],
               shell=True, stdout = f, stderr = f)
    if ret != 0:
        dbg('Generating witness failed')

def generate_counterexample(bindir, saveto = None):
    abd = os.path.abspath(bindir)
    for path in os.listdir('{0}/klee-last'.format(abd)):
        if 'assert' in path:
            pth = os.path.abspath('{0}/klee-last/{1}.path'.format(abd, path[:-11]))
            generate_graphml(pth, saveto)
            break

def get_prp(prp):
    # if property is given in file, read the file
    epath = os.path.expanduser(prp)
    if os.path.isfile(epath):
        prp_list = []
        f = open(epath, 'r')
        for line in f.readlines():
            line = line.strip()
            # ignore empty lines
            if line:
                prp_list.append(line)
        f.close()
        return prp_list

    # it is not a file, so it is given as a string
    # FIXME: this does not work for properties given
    # as LTL (there are spaces)
    return prp.split()

def parse_command_line():
    options = SymbioticOptions()

    try:
        opts, args = getopt.getopt(sys.argv[1:], '',
                                   ['no-slice', '64', 'prp=', 'no-optimize',
                                    'debug=', 'timeout=', 'version', 'help',
                                    'libc=', 'old-slicer', 'require-slicer',
                                    'no-symexe', 'output=', 'witness=', 'bc',
                                    'optimize=', 'no-prepare', 'malloc-never-fails',
                                    'pta=', 'no-lib', 'slicing-criterion=',
                                    'cflags=', 'cppflags='])
                                   # add klee-params
    except getopt.GetoptError as e:
        err('{0}'.format(str(e)))

    for opt, arg in opts:
        if opt == '--help':
            print(usage_msg)
            sys.exit(0)
        elif opt == '--debug':
            global enable_debug
            global debug_opts
            enable_debug = True
            debug_opts = arg.split(',')
        elif opt == '--libc':
             if arg == 'klee':
                 options.add_libc = True
             else:
                 print('Unknown libc')
                 sys.exit(0)

        elif opt == '--no-lib':
            dbg('Won\'t link lib.bc to the module')
            options.no_lib = True
        elif opt == '--version':
            print(VERSION)
            sys.exit(0)
        elif opt == '--no-slice':
            dbg('Will not slice')
            options.noslice = True
        elif opt == '--no-prepare':
            dbg('Will not prepare code')
            options.noprepare = True
        elif opt == '--malloc-never-fails':
            dbg('Assuming malloc and calloc will never fail')
            options.malloc_never_fails = True
        elif opt == '--no-symexe':
            dbg('Will not run symbolic execution')
            options.no_symexe = True
        elif opt == '--require-slicer':
            options.require_slicer = True
        elif opt == '--old-slicer':
            dbg('Will use old slicer')
            options.old_slicer = True
        elif opt == '--64':
            dbg('Will use 64-bit environment')
            options.is32bit = False
        elif opt == '--no-optimize':
            dbg('Will not optimize the code')
            options.no_optimize = True
        elif opt == '--optimize':
            dbg('Optimization levels: ' + arg)
            options.optlevel = arg.split(',')
            for o in options.optlevel:
                o = o.strip()
                if o == "none":
                    options.no_optimize = True
                    options.optlevel = []
                    break
                if not o in ["before", "after", "before-O2", "none"]:
                    err('Unknown optimization level, try --help')
        elif opt == '--prp':
            options.prp = get_prp(arg)
            for prp in options.prp:
                dbg('Property: {0}'.format(prp))
        elif opt == '--pta':
            options.slicer_pta = arg
            if not arg in ['fs', 'fi', 'old']:
                err('Points-to analysis can be one of: fs, fi, old')

            dbg('Points-to: {0}'.format(arg))
        elif opt == '--slicing-criterion':
            options.slicing_criterion = arg
            dbg('Slicing criterion: {0}'.format(arg))
        elif opt == '--timeout':
            options.timeout = int(arg)
            dbg('Timeout set to {0} sec'.format(arg))
        elif opt == '--output':
            options.final_output = arg
            dbg('Output will be stored to {0}'.format(arg))
        elif opt == '--witness':
            options.witness_output = arg
            dbg('Witness will be stored to {0}'.format(arg))
        elif opt == '--bc':
            options.source_is_bc = True
            dbg('Given code is bytecode')
        elif opt == '--cflags':
            global CFLAGS
            CFLAGS += arg.split()
        elif opt == '--cppflags':
            global CPPFLAGS
            CPPFLAGS += arg.split()

    return options, args

if __name__ == "__main__":
    # store time when we have started, so that we can
    # measure how long Symbiotic ran
    start_time = time()

    opts, args = parse_command_line()
    if len(args) < 1:
        print(usage_msg)
        sys.exit(1)

    sources = args
    if opts.source_is_bc and len(sources) != 1:
        err('Bytecode must be only one file')

    if opts.timeout != 0:
        start_timeout(opts.timeout)

    try:
        try:
            # opts.prp now contain a list with keys (or None),
            # but we want the value from the map
            if opts.prp:
                prps = opts.prp[:] # make copy of properties
                opts.prp = []

                for prp in prps:
                    prp_key = supported_properties[prp]
                    opts.prp.append(prp_key)

                    # for some properties we need to modify
                    # parsing of the output
                    if prp_key == 'VALID-DEREF':
                        # we don't know to which locations
                        # we should slice, so suspend the slicing
                        # for now
                        dbg('Will not slice due to VALID-DEREF property')
                        opts.noslice = True

                        patterns['EMEMERROR'] = re.compile('.*memory error: out of bound pointer.*')
                        patterns['EFREE'] = re.compile('.*memory error: invalid pointer: free.*')
        except KeyError as ke:
            err('Unknown or unsupported property: {0}'.format(ke.message))

        # let the show begin!
        symbiotic = Symbiotic(sources, opts)
        res = symbiotic.run()

        if res == 'FALSE' or res == 'ASSERTIONFAILED':
            srcdir = os.path.dirname(symbiotic.llvmfile)
            generate_counterexample(srcdir, opts.witness_output)
    except Timeout:
        sys.stdout.flush()
        sys.stderr.flush()
        if not current_process is None:
            current_process.terminate()
            current_process.kill()

        report_results('TIMEOUT')
    finally:
        stop_timeout()
        sys.stderr.flush()
        sys.stdout.flush()

    # print information about how long Symbiotic ran
    print('INFO: Total time elapsed: {0}'.format(time() - start_time))
    sys.exit(0)
